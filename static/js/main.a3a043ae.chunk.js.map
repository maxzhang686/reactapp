{"version":3,"sources":["component/DateDisplay.js","Clock/index.js","page/ClockWall.js","App.js","serviceWorker.js","index.js"],"names":["DateDisplay","react_default","a","createElement","this","props","message","Date","toLocaleDateString","owner","name","age","React","Component","Clock","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","e","resetTimer","setState","location","target","id","state","city","moment","tz","_this2","clearInterval","timerId","setInterval","time","getLocTime","_this3","TimeCard","LocBar","map","LocButton","key","onClick","LocName","LocImg","src","LocDate","format","LocTime","style","background","styled","div","_templateObject","_templateObject2","button","_templateObject3","_templateObject4","img","_templateObject5","span","_templateObject6","_templateObject7","ClockWall","Wall","src_Clock","ClockWall_templateObject","App","className","page_ClockWall","component_DateDisplay","concat","toLocaleTimeString","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.a3a043ae.chunk.js","sourcesContent":["import React from \"react\";  \n\n\n\n\nclass DateDisplay extends React.Component{\n    render()    {\n         return (\n            \n            <div>\n                <h4>{this.props.message}</h4> \n                <h4>It is {new Date().toLocaleDateString()} now.</h4>\n                <h3>my name is {this.props.owner.name}</h3>\n                <h3>my Age is {this.props.owner.age}</h3>\n                \n               \n            </div> \n            \n        );   \n    }\n\n}\nexport default DateDisplay;\n\n\n\n \n\n\n\n\n// function DateDisplay(){\n//     return(\n\n//             <div>\n//                 <h1>It is {new Date().toLocaleTimeString()} now.</h1>            \n//             </div>\n//     );\n// }\n// export default DateDisplay;","import React from 'react';\n// import moment from 'moment';\nimport moment from 'moment-timezone';\nimport styled from 'styled-components';\n\n\n\nclass Clock extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n        location: this.props.city,\n    }\n}\n\ngetLocTime() {\n  switch(this.state.location) {\n      case 'Beijing':\n      return moment().tz(\"Asia/Shanghai\")\n      case 'Moscow':\n      return moment().tz(\"Europe/Moscow\")\n      case 'Sydney':\n      return moment().tz(\"Australia/Sydney\")\n      case 'New York':\n      return moment().tz(\"America/New_York\")\n      default:\n  }\n}\n\nhandleClick = (e) => {\n  this.resetTimer()\n  this.setState({\n      location: e.target.id,\n  })\n}\n\nresetTimer() {\n  clearInterval(this.timerId)\n  this.timerId = setInterval(() => {\n      this.setState({time: this.getLocTime()})\n  },1000);\n}\n\ncomponentDidMount() {\n  this.resetTimer()\n}\n\ncomponentWillUnmount() {\n  clearInterval(this.timerId)\n}\n\n\n  render(){\n    return(\n    <TimeCard>\n    <LocBar>\n        {['Beijing', 'Sydney', 'Moscow', 'New York'].map((city) => \n            <LocButton id={city} key={city} onClick={this.handleClick}>{city}</LocButton>\n        )}\n    </LocBar>\n    <LocName>\n        {this.state.location}\n    </LocName>\n    <LocImg src={'./img/'+this.state.location+'.jpg'}/>\n   \n    <LocDate>{this.getLocTime().format('YYYY-MM-DD dddd')}</LocDate>\n    <br/>\n    <LocTime>\n\n          <div>\n          <span style={{background:'#766d6dc9'}}>{this.getLocTime().format('HH')}</span> : <span style={{background:'#766d6dc9'}}>{this.getLocTime().format('mm')}</span> : <span style={{background:'#766d6dc9'}}>{this.getLocTime().format('ss')}</span>\n          </div>\n\n        {/* <div style={{background:'#766d6dc9'}}>{this.getLocTime().format('HH')}</div>\n        <div style={{background:'#766d6dc9'}}>{this.getLocTime().format('mm')}</div>\n        \n        <div style={{background:'#766d6dc9'}}>{this.getLocTime().format('ss')}</div> */}\n        \n        \n       \n        \n    </LocTime>\n\n\n\n    \n</TimeCard>\n\n    );\n  }\n}\n\nexport default Clock;\n\n\nconst TimeCard = styled.div`\n    display:inline-block;\n    text-align: center;\n    margin:10px;\n    position:relative;\n    width:300px;\n    height:350px;\n    background-color: #7b72722e;\n    box-shadow: 10px 10px 10px grey;\n    border-radius:10px;\n`;\n\nconst LocBar = styled.div`\n    position:absolute;\n    top:0;\n    left:0;\n    width:100%;\n    height:10%;\n`;\n\nconst LocButton = styled.button`\n    border:0;\n    outline:none;\n    display:inline-block;\n    width:25%;\n    height:100%;\n    background-color:white;\n    opacity:0.4;\n    &:hover {\n        opacity:0.6;\n    }\n`;\n\nconst LocName = styled.div`\n    position:absolute;\n    top:10%;\n    width:auto;\n    height:10%;\n    margin:10px;\n    font-size:20px;\n    font-weight:500;\n`;\n\nconst LocImg = styled.img`\n    width:100%;\n    height:80%;\n    border-radius:10px 10px 0 0;\n`;\n\nconst LocDate = styled.span`\n    font-size:20px;\n    font-weight:700;\n    color:#080808b3;\n`;\n\nconst LocTime = styled.div`\n    display:inline-block;\n    font-size:25px;\n    font-weight:700;\n    color:#08080885;\n`;\n\n\n\n","import React,{Component} from 'react';\nimport Clock from '../Clock'\n// import Clock from '../Clock/index02'\nimport styled from 'styled-components';\nimport '../App.css'\n\n   \nclass ClockWall extends Component{\n\n  render(){\n    // const tzs = ['Asia/Tokyo','America/New_York','Australia/Sydney','Europe/London'];\n    \n    return(\n    <Wall> \n      {/* <Clock tz={tzs[0]}/> */}\n      <Clock key={'Beijing'} city={'Beijing'}/>\n         \n    </Wall>\n    );\n  }\n}\nexport default ClockWall;\n\nconst Wall = styled.div`\n    width:100%;\n    height:auto;\n`;","import React, { Component } from 'react';\n \nimport DateDisplay from \"./component/DateDisplay\";\n// import Card from './Component/Card';\n// import Clock01 from './component/Clock01';\nimport ClockWall from './page/ClockWall'\nimport './App.css';\n\n\n\n\n// const title = ['Dog', 'Cat', 'Bird'];\n// const subTitle = ['t1','t2','t3'];\n// const img = [\n//   'https://picsum.photos/id/237/200/300',\n//   'https://picsum.photos/id/237/200/300',\n//   'https://picsum.photos/id/237/200/300'\n// ]\n\n\nclass App extends Component {\n\n// constructor(props){\n//   super(props);\n//   const time =  new Date().toLocaleTimeString();\n//   this.state = { \n//     time, }\n// }\n\n// componentDidMount(){\n// setInterval(()=>{\n//   this.setState({time:new Date().toLocaleTimeString()});\n// }\n//   ,100);\n// }\n\n  render() {\n    return ( \n      <div className=\"App\">\n        \n          <ClockWall/>\n\n\n\n          <DateDisplay \n          message={`Web Open at : ${new Date().toLocaleTimeString()}`} \n          owner={ {name:'jackie',age:'27'}}   \n          />\n          {/* <Card  title={title[0]} subTitle={subTitle[0]} img={img[0]}/>\n          <Card  title={title[1]} subTitle={subTitle[1]} img={img[0]}/>\n          <Card  title={title[2]} subTitle={subTitle[2]} img={img[0]}/> */}\n\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n   "],"sourceRoot":""}